basePath: /api/v1
definitions:
  request.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  request.RegisterUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      provider:
        type: string
      provider_id:
        type: string
      web_auth_token:
        type: string
    required:
    - email
    - first_name
    - last_name
    type: object
  request.UpdateProfileRequest:
    properties:
      company_website:
        type: string
      employment_type:
        type: string
      first_name:
        type: string
      gender:
        type: string
      job_role:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      residential_country:
        type: string
    required:
    - first_name
    - last_name
    - nationality
    type: object
  request.WaitlistJoinRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      referral_code:
        type: string
      referral_source:
        type: string
    required:
    - email
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  response.PageResponse:
    properties:
      items: {}
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.UserResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      provider:
        type: string
      provider_id:
        type: string
      updated_at:
        type: string
    type: object
  response.WaitlistEntryResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      invited_date:
        type: string
      position:
        type: integer
      referral_code:
        type: string
      referral_source:
        type: string
      signup_date:
        type: string
      status:
        type: string
    type: object
  response.WaitlistStatsResponse:
    properties:
      conversion_rate:
        type: number
      invited_count:
        type: integer
      registered_count:
        type: integer
      sources:
        additionalProperties:
          type: integer
        type: object
      total_signups:
        type: integer
      waiting_count:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: hello@defifundr.com
    name: DefiFundr Support
    url: http://defifundr.com/support
  description: Decentralized Payroll and Invoicing Platform for Remote Teams
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DefiFundr API
  version: "1.0"
paths:
  /admin/waitlist:
    get:
      consumes:
      - application/json
      description: List waitlist entries with pagination and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Filter by status (waiting, invited, registered)
        in: query
        name: status
        type: string
      - description: Filter by referral source
        in: query
        name: source
        type: string
      - description: Order by (signup_date_asc, signup_date_desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Paginated list of waitlist entries
          schema:
            $ref: '#/definitions/response.PageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List waitlist entries
      tags:
      - waitlist
  /admin/waitlist/export:
    get:
      consumes:
      - application/json
      description: Export all waitlist data as CSV
      produces:
      - text/csv
      responses:
        "200":
          description: CSV file
          schema:
            type: file
      security:
      - BearerAuth: []
      summary: Export waitlist data
      tags:
      - waitlist
  /admin/waitlist/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about the waitlist
      produces:
      - application/json
      responses:
        "200":
          description: Waitlist statistics
          schema:
            $ref: '#/definitions/response.WaitlistStatsResponse'
      security:
      - BearerAuth: []
      summary: Get waitlist statistics
      tags:
      - waitlist
  /auth/register/user:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/request.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Business-User
  /users/change-password:
    post:
      consumes:
      - application/json
      description: Change authenticated user's password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update authenticated user's profile information
      parameters:
      - description: Profile data to update
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user profile
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /waitlist:
    post:
      consumes:
      - application/json
      description: Register for early access to the platform
      parameters:
      - description: Waitlist join data
        in: body
        name: join
        required: true
        schema:
          $ref: '#/definitions/request.WaitlistJoinRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully joined waitlist
          schema:
            $ref: '#/definitions/response.WaitlistEntryResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Email already on waitlist
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many requests
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Join the waitlist
      tags:
      - waitlist
schemes:
- http
- https
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
