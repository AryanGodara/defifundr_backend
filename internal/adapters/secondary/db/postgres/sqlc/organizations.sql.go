// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: organizations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
  name,
  employer_id
) VALUES (
  $1, $2
) RETURNING id, name, employer_id, created_at, updated_at
`

type CreateOrganizationParams struct {
	Name       string    `json:"name"`
	EmployerID uuid.UUID `json:"employer_id"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.EmployerID)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmployerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1 AND employer_id = $2
`

type DeleteOrganizationParams struct {
	ID         uuid.UUID `json:"id"`
	EmployerID uuid.UUID `json:"employer_id"`
}

func (q *Queries) DeleteOrganization(ctx context.Context, arg DeleteOrganizationParams) error {
	_, err := q.db.Exec(ctx, deleteOrganization, arg.ID, arg.EmployerID)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, employer_id, created_at, updated_at FROM organizations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, id uuid.UUID) (Organizations, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmployerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployerOrganizations = `-- name: ListEmployerOrganizations :many
SELECT id, name, employer_id, created_at, updated_at FROM organizations
WHERE employer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEmployerOrganizations(ctx context.Context, employerID uuid.UUID) ([]Organizations, error) {
	rows, err := q.db.Query(ctx, listEmployerOrganizations, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organizations{}
	for rows.Next() {
		var i Organizations
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmployerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET 
  name = $2,
  updated_at = now()
WHERE id = $1 AND employer_id = $3
RETURNING id, name, employer_id, created_at, updated_at
`

type UpdateOrganizationParams struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	EmployerID uuid.UUID `json:"employer_id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organizations, error) {
	row := q.db.QueryRow(ctx, updateOrganization, arg.ID, arg.Name, arg.EmployerID)
	var i Organizations
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmployerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
