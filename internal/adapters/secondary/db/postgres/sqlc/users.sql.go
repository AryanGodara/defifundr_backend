// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, 
  password_hash,
  account_type,
  personal_account_type,
  first_name,
  last_name,
  nationality,
  residential_country,
  job_role,
  company_website,
  employment_type
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, email, password_hash, account_type, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_website, employment_type, created_at, updated_at
`

type CreateUserParams struct {
	Email               string      `json:"email"`
	PasswordHash        string      `json:"password_hash"`
	AccountType         string      `json:"account_type"`
	PersonalAccountType string      `json:"personal_account_type"`
	FirstName           string      `json:"first_name"`
	LastName            string      `json:"last_name"`
	Nationality         string      `json:"nationality"`
	ResidentialCountry  pgtype.Text `json:"residential_country"`
	JobRole             pgtype.Text `json:"job_role"`
	CompanyWebsite      pgtype.Text `json:"company_website"`
	EmploymentType      pgtype.Text `json:"employment_type"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.AccountType,
		arg.PersonalAccountType,
		arg.FirstName,
		arg.LastName,
		arg.Nationality,
		arg.ResidentialCountry,
		arg.JobRole,
		arg.CompanyWebsite,
		arg.EmploymentType,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AccountType,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, account_type, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_website, employment_type, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AccountType,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, account_type, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_website, employment_type, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AccountType,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, account_type, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_website, employment_type, created_at, updated_at FROM users
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.AccountType,
			&i.PersonalAccountType,
			&i.FirstName,
			&i.LastName,
			&i.Nationality,
			&i.ResidentialCountry,
			&i.JobRole,
			&i.CompanyWebsite,
			&i.EmploymentType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  nationality = COALESCE($4, nationality),
  residential_country = COALESCE($5, residential_country),
  job_role = COALESCE($6, job_role),
  company_website = COALESCE($7, company_website),
  employment_type = COALESCE($8, employment_type),
  updated_at = now()
WHERE id = $1
RETURNING id, email, password_hash, account_type, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_website, employment_type, created_at, updated_at
`

type UpdateUserParams struct {
	ID                 uuid.UUID   `json:"id"`
	FirstName          string      `json:"first_name"`
	LastName           string      `json:"last_name"`
	Nationality        string      `json:"nationality"`
	ResidentialCountry pgtype.Text `json:"residential_country"`
	JobRole            pgtype.Text `json:"job_role"`
	CompanyWebsite     pgtype.Text `json:"company_website"`
	EmploymentType     pgtype.Text `json:"employment_type"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Nationality,
		arg.ResidentialCountry,
		arg.JobRole,
		arg.CompanyWebsite,
		arg.EmploymentType,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AccountType,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
