// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: notifications.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  user_id,
  message,
  type,
  is_read
) VALUES (
  $1, $2, $3, false
) RETURNING id, user_id, message, type, is_read, created_at
`

type CreateNotificationParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Message string    `json:"message"`
	Type    string    `json:"type"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notifications, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.Message, arg.Type)
	var i Notifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Type,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1 AND user_id = $2
`

type DeleteNotificationParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error {
	_, err := q.db.Exec(ctx, deleteNotification, arg.ID, arg.UserID)
	return err
}

const getNotification = `-- name: GetNotification :one
SELECT id, user_id, message, type, is_read, created_at FROM notifications
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNotification(ctx context.Context, id uuid.UUID) (Notifications, error) {
	row := q.db.QueryRow(ctx, getNotification, id)
	var i Notifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Type,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getUnreadNotificationCount = `-- name: GetUnreadNotificationCount :one
SELECT COUNT(*) FROM notifications
WHERE user_id = $1 AND is_read = false
`

func (q *Queries) GetUnreadNotificationCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUnreadNotificationCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUserNotifications = `-- name: ListUserNotifications :many
SELECT id, user_id, message, type, is_read, created_at FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListUserNotificationsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserNotifications(ctx context.Context, arg ListUserNotificationsParams) ([]Notifications, error) {
	rows, err := q.db.Query(ctx, listUserNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notifications{}
	for rows.Next() {
		var i Notifications
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.Type,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllUserNotificationsRead = `-- name: MarkAllUserNotificationsRead :exec
UPDATE notifications
SET is_read = true
WHERE user_id = $1 AND is_read = false
`

func (q *Queries) MarkAllUserNotificationsRead(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, markAllUserNotificationsRead, userID)
	return err
}

const markNotificationRead = `-- name: MarkNotificationRead :one
UPDATE notifications
SET is_read = true
WHERE id = $1
RETURNING id, user_id, message, type, is_read, created_at
`

func (q *Queries) MarkNotificationRead(ctx context.Context, id uuid.UUID) (Notifications, error) {
	row := q.db.QueryRow(ctx, markNotificationRead, id)
	var i Notifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Type,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}
