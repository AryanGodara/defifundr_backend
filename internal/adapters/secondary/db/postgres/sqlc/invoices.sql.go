// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: invoices.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
  freelancer_id,
  employer_id,
  amount,
  currency,
  status
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, freelancer_id, employer_id, amount, currency, status, contract_address, created_at, updated_at
`

type CreateInvoiceParams struct {
	FreelancerID uuid.UUID       `json:"freelancer_id"`
	EmployerID   uuid.UUID       `json:"employer_id"`
	Amount       decimal.Decimal `json:"amount"`
	Currency     string          `json:"currency"`
	Status       string          `json:"status"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoices, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.FreelancerID,
		arg.EmployerID,
		arg.Amount,
		arg.Currency,
		arg.Status,
	)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.FreelancerID,
		&i.EmployerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.ContractAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, freelancer_id, employer_id, amount, currency, status, contract_address, created_at, updated_at FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id uuid.UUID) (Invoices, error) {
	row := q.db.QueryRow(ctx, getInvoice, id)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.FreelancerID,
		&i.EmployerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.ContractAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployerInvoices = `-- name: ListEmployerInvoices :many
SELECT i.id, i.freelancer_id, i.employer_id, i.amount, i.currency, i.status, i.contract_address, i.created_at, i.updated_at, u.first_name as freelancer_first_name, u.last_name as freelancer_last_name
FROM invoices i
JOIN users u ON i.freelancer_id = u.id
WHERE i.employer_id = $1
ORDER BY i.created_at DESC
`

type ListEmployerInvoicesRow struct {
	ID                  uuid.UUID       `json:"id"`
	FreelancerID        uuid.UUID       `json:"freelancer_id"`
	EmployerID          uuid.UUID       `json:"employer_id"`
	Amount              decimal.Decimal `json:"amount"`
	Currency            string          `json:"currency"`
	Status              string          `json:"status"`
	ContractAddress     pgtype.Text     `json:"contract_address"`
	CreatedAt           time.Time       `json:"created_at"`
	UpdatedAt           time.Time       `json:"updated_at"`
	FreelancerFirstName string          `json:"freelancer_first_name"`
	FreelancerLastName  string          `json:"freelancer_last_name"`
}

func (q *Queries) ListEmployerInvoices(ctx context.Context, employerID uuid.UUID) ([]ListEmployerInvoicesRow, error) {
	rows, err := q.db.Query(ctx, listEmployerInvoices, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEmployerInvoicesRow{}
	for rows.Next() {
		var i ListEmployerInvoicesRow
		if err := rows.Scan(
			&i.ID,
			&i.FreelancerID,
			&i.EmployerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.ContractAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FreelancerFirstName,
			&i.FreelancerLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFreelancerInvoices = `-- name: ListFreelancerInvoices :many
SELECT i.id, i.freelancer_id, i.employer_id, i.amount, i.currency, i.status, i.contract_address, i.created_at, i.updated_at, u.first_name as employer_first_name, u.last_name as employer_last_name
FROM invoices i
JOIN users u ON i.employer_id = u.id
WHERE i.freelancer_id = $1
ORDER BY i.created_at DESC
`

type ListFreelancerInvoicesRow struct {
	ID                uuid.UUID       `json:"id"`
	FreelancerID      uuid.UUID       `json:"freelancer_id"`
	EmployerID        uuid.UUID       `json:"employer_id"`
	Amount            decimal.Decimal `json:"amount"`
	Currency          string          `json:"currency"`
	Status            string          `json:"status"`
	ContractAddress   pgtype.Text     `json:"contract_address"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
	EmployerFirstName string          `json:"employer_first_name"`
	EmployerLastName  string          `json:"employer_last_name"`
}

func (q *Queries) ListFreelancerInvoices(ctx context.Context, freelancerID uuid.UUID) ([]ListFreelancerInvoicesRow, error) {
	rows, err := q.db.Query(ctx, listFreelancerInvoices, freelancerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFreelancerInvoicesRow{}
	for rows.Next() {
		var i ListFreelancerInvoicesRow
		if err := rows.Scan(
			&i.ID,
			&i.FreelancerID,
			&i.EmployerID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.ContractAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EmployerFirstName,
			&i.EmployerLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoiceContractAddress = `-- name: UpdateInvoiceContractAddress :one
UPDATE invoices
SET 
  contract_address = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, freelancer_id, employer_id, amount, currency, status, contract_address, created_at, updated_at
`

type UpdateInvoiceContractAddressParams struct {
	ID              uuid.UUID   `json:"id"`
	ContractAddress pgtype.Text `json:"contract_address"`
}

func (q *Queries) UpdateInvoiceContractAddress(ctx context.Context, arg UpdateInvoiceContractAddressParams) (Invoices, error) {
	row := q.db.QueryRow(ctx, updateInvoiceContractAddress, arg.ID, arg.ContractAddress)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.FreelancerID,
		&i.EmployerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.ContractAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInvoiceStatus = `-- name: UpdateInvoiceStatus :one
UPDATE invoices
SET 
  status = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, freelancer_id, employer_id, amount, currency, status, contract_address, created_at, updated_at
`

type UpdateInvoiceStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateInvoiceStatus(ctx context.Context, arg UpdateInvoiceStatusParams) (Invoices, error) {
	row := q.db.QueryRow(ctx, updateInvoiceStatus, arg.ID, arg.Status)
	var i Invoices
	err := row.Scan(
		&i.ID,
		&i.FreelancerID,
		&i.EmployerID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.ContractAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
