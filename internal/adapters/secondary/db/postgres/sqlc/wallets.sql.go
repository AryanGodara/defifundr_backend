// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: wallets.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
  user_id,
  wallet_address,
  chain,
  is_primary,
  pin_hash
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, wallet_address, chain, is_primary, created_at, pin_hash
`

type CreateWalletParams struct {
	UserID        uuid.UUID `json:"user_id"`
	WalletAddress string    `json:"wallet_address"`
	Chain         string    `json:"chain"`
	IsPrimary     bool      `json:"is_primary"`
	PinHash       string    `json:"pin_hash"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallets, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.UserID,
		arg.WalletAddress,
		arg.Chain,
		arg.IsPrimary,
		arg.PinHash,
	)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.PinHash,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1 AND user_id = $2
`

type DeleteWalletParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteWallet(ctx context.Context, arg DeleteWalletParams) error {
	_, err := q.db.Exec(ctx, deleteWallet, arg.ID, arg.UserID)
	return err
}

const getPrimaryWallet = `-- name: GetPrimaryWallet :one
SELECT id, user_id, wallet_address, chain, is_primary, created_at, pin_hash FROM wallets
WHERE user_id = $1 AND is_primary = true
LIMIT 1
`

func (q *Queries) GetPrimaryWallet(ctx context.Context, userID uuid.UUID) (Wallets, error) {
	row := q.db.QueryRow(ctx, getPrimaryWallet, userID)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.PinHash,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, wallet_address, chain, is_primary, created_at, pin_hash FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id uuid.UUID) (Wallets, error) {
	row := q.db.QueryRow(ctx, getWallet, id)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.PinHash,
	)
	return i, err
}

const getWalletByAddress = `-- name: GetWalletByAddress :one
SELECT id, user_id, wallet_address, chain, is_primary, created_at, pin_hash FROM wallets
WHERE wallet_address = $1 LIMIT 1
`

func (q *Queries) GetWalletByAddress(ctx context.Context, walletAddress string) (Wallets, error) {
	row := q.db.QueryRow(ctx, getWalletByAddress, walletAddress)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.PinHash,
	)
	return i, err
}

const listUserWallets = `-- name: ListUserWallets :many
SELECT id, user_id, wallet_address, chain, is_primary, created_at, pin_hash FROM wallets
WHERE user_id = $1
ORDER BY is_primary DESC, created_at DESC
`

func (q *Queries) ListUserWallets(ctx context.Context, userID uuid.UUID) ([]Wallets, error) {
	rows, err := q.db.Query(ctx, listUserWallets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallets{}
	for rows.Next() {
		var i Wallets
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WalletAddress,
			&i.Chain,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.PinHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPrimaryWallet = `-- name: SetPrimaryWallet :exec
UPDATE wallets
SET is_primary = false
WHERE user_id = $1
`

func (q *Queries) SetPrimaryWallet(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, setPrimaryWallet, userID)
	return err
}

const updateWalletPrimary = `-- name: UpdateWalletPrimary :one
UPDATE wallets
SET is_primary = true
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, wallet_address, chain, is_primary, created_at, pin_hash
`

type UpdateWalletPrimaryParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateWalletPrimary(ctx context.Context, arg UpdateWalletPrimaryParams) (Wallets, error) {
	row := q.db.QueryRow(ctx, updateWalletPrimary, arg.ID, arg.UserID)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletAddress,
		&i.Chain,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.PinHash,
	)
	return i, err
}
