// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type Invoices struct {
	ID           uuid.UUID       `json:"id"`
	FreelancerID uuid.UUID       `json:"freelancer_id"`
	EmployerID   uuid.UUID       `json:"employer_id"`
	Amount       decimal.Decimal `json:"amount"`
	// USDC, SOL, ETH
	Currency string `json:"currency"`
	// pending, approved, rejected, paid
	Status          string      `json:"status"`
	ContractAddress pgtype.Text `json:"contract_address"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

type Kyc struct {
	ID                   uuid.UUID `json:"id"`
	UserID               uuid.UUID `json:"user_id"`
	FaceVerification     bool      `json:"face_verification"`
	IdentityVerification bool      `json:"identity_verification"`
	UpdatedAt            time.Time `json:"updated_at"`
	CreatedAt            time.Time `json:"created_at"`
}

type Notifications struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	Message   string             `json:"message"`
	Type      string             `json:"type"`
	IsRead    bool               `json:"is_read"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type OrganizationMembers struct {
	ID             uuid.UUID `json:"id"`
	OrganizationID uuid.UUID `json:"organization_id"`
	EmployeeID     uuid.UUID `json:"employee_id"`
	// employee, manager, etc.
	Role      string    `json:"role"`
	CreatedAt time.Time `json:"created_at"`
}

type Organizations struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	EmployerID uuid.UUID `json:"employer_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type PayrollEmployees struct {
	ID         uuid.UUID `json:"id"`
	PayrollID  uuid.UUID `json:"payroll_id"`
	EmployeeID uuid.UUID `json:"employee_id"`
	CreatedAt  time.Time `json:"created_at"`
}

type Payrolls struct {
	ID             uuid.UUID   `json:"id"`
	EmployerID     uuid.UUID   `json:"employer_id"`
	OrganizationID pgtype.UUID `json:"organization_id"`
	// weekly, bi-weekly, monthly
	PaymentFrequency string          `json:"payment_frequency"`
	SalaryAmount     decimal.Decimal `json:"salary_amount"`
	// USDC, SOL, ETH
	Currency        string      `json:"currency"`
	ContractAddress pgtype.Text `json:"contract_address"`
	// pending, active, completed
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Sessions struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Transactions struct {
	ID     uuid.UUID       `json:"id"`
	UserID uuid.UUID       `json:"user_id"`
	TxHash string          `json:"tx_hash"`
	Amount decimal.Decimal `json:"amount"`
	// USDC, SOL, ETH
	Currency string `json:"currency"`
	// payroll, invoice
	Type string `json:"type"`
	// pending, success, failed
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

type Users struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	// business, personal
	AccountType string `json:"account_type"`
	// contractor, business
	PersonalAccountType string      `json:"personal_account_type"`
	FirstName           string      `json:"first_name"`
	LastName            string      `json:"last_name"`
	Nationality         string      `json:"nationality"`
	ResidentialCountry  pgtype.Text `json:"residential_country"`
	JobRole             pgtype.Text `json:"job_role"`
	CompanyWebsite      pgtype.Text `json:"company_website"`
	EmploymentType      pgtype.Text `json:"employment_type"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

type Wallets struct {
	ID            uuid.UUID `json:"id"`
	UserID        uuid.UUID `json:"user_id"`
	WalletAddress string    `json:"wallet_address"`
	// ethereum, solana
	Chain     string    `json:"chain"`
	IsPrimary bool      `json:"is_primary"`
	CreatedAt time.Time `json:"created_at"`
	PinHash   string    `json:"pin_hash"`
}
