// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: payrolls.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createPayroll = `-- name: CreatePayroll :one
INSERT INTO payrolls (
  employer_id,
  organization_id,
  payment_frequency,
  salary_amount,
  currency,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at
`

type CreatePayrollParams struct {
	EmployerID       uuid.UUID       `json:"employer_id"`
	OrganizationID   pgtype.UUID     `json:"organization_id"`
	PaymentFrequency string          `json:"payment_frequency"`
	SalaryAmount     decimal.Decimal `json:"salary_amount"`
	Currency         string          `json:"currency"`
	Status           string          `json:"status"`
}

func (q *Queries) CreatePayroll(ctx context.Context, arg CreatePayrollParams) (Payrolls, error) {
	row := q.db.QueryRow(ctx, createPayroll,
		arg.EmployerID,
		arg.OrganizationID,
		arg.PaymentFrequency,
		arg.SalaryAmount,
		arg.Currency,
		arg.Status,
	)
	var i Payrolls
	err := row.Scan(
		&i.ID,
		&i.EmployerID,
		&i.OrganizationID,
		&i.PaymentFrequency,
		&i.SalaryAmount,
		&i.Currency,
		&i.ContractAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayroll = `-- name: DeletePayroll :exec
DELETE FROM payrolls
WHERE id = $1 AND employer_id = $2 AND status = 'pending'
`

type DeletePayrollParams struct {
	ID         uuid.UUID `json:"id"`
	EmployerID uuid.UUID `json:"employer_id"`
}

func (q *Queries) DeletePayroll(ctx context.Context, arg DeletePayrollParams) error {
	_, err := q.db.Exec(ctx, deletePayroll, arg.ID, arg.EmployerID)
	return err
}

const getPayroll = `-- name: GetPayroll :one
SELECT id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at FROM payrolls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayroll(ctx context.Context, id uuid.UUID) (Payrolls, error) {
	row := q.db.QueryRow(ctx, getPayroll, id)
	var i Payrolls
	err := row.Scan(
		&i.ID,
		&i.EmployerID,
		&i.OrganizationID,
		&i.PaymentFrequency,
		&i.SalaryAmount,
		&i.Currency,
		&i.ContractAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployerPayrolls = `-- name: ListEmployerPayrolls :many
SELECT id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at FROM payrolls
WHERE employer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEmployerPayrolls(ctx context.Context, employerID uuid.UUID) ([]Payrolls, error) {
	rows, err := q.db.Query(ctx, listEmployerPayrolls, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payrolls{}
	for rows.Next() {
		var i Payrolls
		if err := rows.Scan(
			&i.ID,
			&i.EmployerID,
			&i.OrganizationID,
			&i.PaymentFrequency,
			&i.SalaryAmount,
			&i.Currency,
			&i.ContractAddress,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationPayrolls = `-- name: ListOrganizationPayrolls :many
SELECT id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at FROM payrolls
WHERE organization_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizationPayrolls(ctx context.Context, organizationID pgtype.UUID) ([]Payrolls, error) {
	rows, err := q.db.Query(ctx, listOrganizationPayrolls, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payrolls{}
	for rows.Next() {
		var i Payrolls
		if err := rows.Scan(
			&i.ID,
			&i.EmployerID,
			&i.OrganizationID,
			&i.PaymentFrequency,
			&i.SalaryAmount,
			&i.Currency,
			&i.ContractAddress,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayrollContractAddress = `-- name: UpdatePayrollContractAddress :one
UPDATE payrolls
SET 
  contract_address = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at
`

type UpdatePayrollContractAddressParams struct {
	ID              uuid.UUID   `json:"id"`
	ContractAddress pgtype.Text `json:"contract_address"`
}

func (q *Queries) UpdatePayrollContractAddress(ctx context.Context, arg UpdatePayrollContractAddressParams) (Payrolls, error) {
	row := q.db.QueryRow(ctx, updatePayrollContractAddress, arg.ID, arg.ContractAddress)
	var i Payrolls
	err := row.Scan(
		&i.ID,
		&i.EmployerID,
		&i.OrganizationID,
		&i.PaymentFrequency,
		&i.SalaryAmount,
		&i.Currency,
		&i.ContractAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePayrollStatus = `-- name: UpdatePayrollStatus :one
UPDATE payrolls
SET 
  status = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, employer_id, organization_id, payment_frequency, salary_amount, currency, contract_address, status, created_at, updated_at
`

type UpdatePayrollStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdatePayrollStatus(ctx context.Context, arg UpdatePayrollStatusParams) (Payrolls, error) {
	row := q.db.QueryRow(ctx, updatePayrollStatus, arg.ID, arg.Status)
	var i Payrolls
	err := row.Scan(
		&i.ID,
		&i.EmployerID,
		&i.OrganizationID,
		&i.PaymentFrequency,
		&i.SalaryAmount,
		&i.Currency,
		&i.ContractAddress,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
