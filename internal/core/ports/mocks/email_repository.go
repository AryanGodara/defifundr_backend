// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/demola234/defifundr/internal/core/ports"
)

type FakeEmailRepository struct {
	SendPasswordResetEmailStub        func(context.Context, string, string, string) error
	sendPasswordResetEmailMutex       sync.RWMutex
	sendPasswordResetEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	sendPasswordResetEmailReturns struct {
		result1 error
	}
	sendPasswordResetEmailReturnsOnCall map[int]struct {
		result1 error
	}
	SendVerificationEmailStub        func(context.Context, string, string, string) error
	sendVerificationEmailMutex       sync.RWMutex
	sendVerificationEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	sendVerificationEmailReturns struct {
		result1 error
	}
	sendVerificationEmailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmailRepository) SendPasswordResetEmail(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.sendPasswordResetEmailMutex.Lock()
	ret, specificReturn := fake.sendPasswordResetEmailReturnsOnCall[len(fake.sendPasswordResetEmailArgsForCall)]
	fake.sendPasswordResetEmailArgsForCall = append(fake.sendPasswordResetEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SendPasswordResetEmailStub
	fakeReturns := fake.sendPasswordResetEmailReturns
	fake.recordInvocation("SendPasswordResetEmail", []interface{}{arg1, arg2, arg3, arg4})
	fake.sendPasswordResetEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEmailRepository) SendPasswordResetEmailCallCount() int {
	fake.sendPasswordResetEmailMutex.RLock()
	defer fake.sendPasswordResetEmailMutex.RUnlock()
	return len(fake.sendPasswordResetEmailArgsForCall)
}

func (fake *FakeEmailRepository) SendPasswordResetEmailCalls(stub func(context.Context, string, string, string) error) {
	fake.sendPasswordResetEmailMutex.Lock()
	defer fake.sendPasswordResetEmailMutex.Unlock()
	fake.SendPasswordResetEmailStub = stub
}

func (fake *FakeEmailRepository) SendPasswordResetEmailArgsForCall(i int) (context.Context, string, string, string) {
	fake.sendPasswordResetEmailMutex.RLock()
	defer fake.sendPasswordResetEmailMutex.RUnlock()
	argsForCall := fake.sendPasswordResetEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEmailRepository) SendPasswordResetEmailReturns(result1 error) {
	fake.sendPasswordResetEmailMutex.Lock()
	defer fake.sendPasswordResetEmailMutex.Unlock()
	fake.SendPasswordResetEmailStub = nil
	fake.sendPasswordResetEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailRepository) SendPasswordResetEmailReturnsOnCall(i int, result1 error) {
	fake.sendPasswordResetEmailMutex.Lock()
	defer fake.sendPasswordResetEmailMutex.Unlock()
	fake.SendPasswordResetEmailStub = nil
	if fake.sendPasswordResetEmailReturnsOnCall == nil {
		fake.sendPasswordResetEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendPasswordResetEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailRepository) SendVerificationEmail(arg1 context.Context, arg2 string, arg3 string, arg4 string) error {
	fake.sendVerificationEmailMutex.Lock()
	ret, specificReturn := fake.sendVerificationEmailReturnsOnCall[len(fake.sendVerificationEmailArgsForCall)]
	fake.sendVerificationEmailArgsForCall = append(fake.sendVerificationEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SendVerificationEmailStub
	fakeReturns := fake.sendVerificationEmailReturns
	fake.recordInvocation("SendVerificationEmail", []interface{}{arg1, arg2, arg3, arg4})
	fake.sendVerificationEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEmailRepository) SendVerificationEmailCallCount() int {
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	return len(fake.sendVerificationEmailArgsForCall)
}

func (fake *FakeEmailRepository) SendVerificationEmailCalls(stub func(context.Context, string, string, string) error) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = stub
}

func (fake *FakeEmailRepository) SendVerificationEmailArgsForCall(i int) (context.Context, string, string, string) {
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	argsForCall := fake.sendVerificationEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEmailRepository) SendVerificationEmailReturns(result1 error) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = nil
	fake.sendVerificationEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailRepository) SendVerificationEmailReturnsOnCall(i int, result1 error) {
	fake.sendVerificationEmailMutex.Lock()
	defer fake.sendVerificationEmailMutex.Unlock()
	fake.SendVerificationEmailStub = nil
	if fake.sendVerificationEmailReturnsOnCall == nil {
		fake.sendVerificationEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendVerificationEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendPasswordResetEmailMutex.RLock()
	defer fake.sendPasswordResetEmailMutex.RUnlock()
	fake.sendVerificationEmailMutex.RLock()
	defer fake.sendVerificationEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEmailRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ports.EmailRepository = new(FakeEmailRepository)
