// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/demola234/defifundr/internal/core/domain"
	"github.com/demola234/defifundr/internal/core/ports"
	"github.com/google/uuid"
)

type FakeUserRepository struct {
	CreateUserStub        func(context.Context, domain.User) (*domain.User, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 context.Context
		arg2 domain.User
	}
	createUserReturns struct {
		result1 *domain.User
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	GetUserByEmailStub        func(context.Context, string) (*domain.User, error)
	getUserByEmailMutex       sync.RWMutex
	getUserByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserByEmailReturns struct {
		result1 *domain.User
		result2 error
	}
	getUserByEmailReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	GetUserByIDStub        func(context.Context, uuid.UUID) (*domain.User, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getUserByIDReturns struct {
		result1 *domain.User
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	GetUserByProviderIDStub        func(context.Context, string, string) (*domain.User, error)
	getUserByProviderIDMutex       sync.RWMutex
	getUserByProviderIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getUserByProviderIDReturns struct {
		result1 *domain.User
		result2 error
	}
	getUserByProviderIDReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	UpdatePasswordStub        func(context.Context, uuid.UUID, string) error
	updatePasswordMutex       sync.RWMutex
	updatePasswordArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}
	updatePasswordReturns struct {
		result1 error
	}
	updatePasswordReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateUserStub        func(context.Context, domain.User) (*domain.User, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 domain.User
	}
	updateUserReturns struct {
		result1 *domain.User
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	ValidateWebOAuthUserStub        func(context.Context, string, string) (*domain.User, error)
	validateWebOAuthUserMutex       sync.RWMutex
	validateWebOAuthUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	validateWebOAuthUserReturns struct {
		result1 *domain.User
		result2 error
	}
	validateWebOAuthUserReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) CreateUser(arg1 context.Context, arg2 domain.User) (*domain.User, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 context.Context
		arg2 domain.User
	}{arg1, arg2})
	stub := fake.CreateUserStub
	fakeReturns := fake.createUserReturns
	fake.recordInvocation("CreateUser", []interface{}{arg1, arg2})
	fake.createUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeUserRepository) CreateUserCalls(stub func(context.Context, domain.User) (*domain.User, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeUserRepository) CreateUserArgsForCall(i int) (context.Context, domain.User) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) CreateUserReturns(result1 *domain.User, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) CreateUserReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByEmail(arg1 context.Context, arg2 string) (*domain.User, error) {
	fake.getUserByEmailMutex.Lock()
	ret, specificReturn := fake.getUserByEmailReturnsOnCall[len(fake.getUserByEmailArgsForCall)]
	fake.getUserByEmailArgsForCall = append(fake.getUserByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserByEmailStub
	fakeReturns := fake.getUserByEmailReturns
	fake.recordInvocation("GetUserByEmail", []interface{}{arg1, arg2})
	fake.getUserByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetUserByEmailCallCount() int {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	return len(fake.getUserByEmailArgsForCall)
}

func (fake *FakeUserRepository) GetUserByEmailCalls(stub func(context.Context, string) (*domain.User, error)) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = stub
}

func (fake *FakeUserRepository) GetUserByEmailArgsForCall(i int) (context.Context, string) {
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	argsForCall := fake.getUserByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) GetUserByEmailReturns(result1 *domain.User, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	fake.getUserByEmailReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByEmailReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.getUserByEmailMutex.Lock()
	defer fake.getUserByEmailMutex.Unlock()
	fake.GetUserByEmailStub = nil
	if fake.getUserByEmailReturnsOnCall == nil {
		fake.getUserByEmailReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.getUserByEmailReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByID(arg1 context.Context, arg2 uuid.UUID) (*domain.User, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeUserRepository) GetUserByIDCalls(stub func(context.Context, uuid.UUID) (*domain.User, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeUserRepository) GetUserByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) GetUserByIDReturns(result1 *domain.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByIDReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByProviderID(arg1 context.Context, arg2 string, arg3 string) (*domain.User, error) {
	fake.getUserByProviderIDMutex.Lock()
	ret, specificReturn := fake.getUserByProviderIDReturnsOnCall[len(fake.getUserByProviderIDArgsForCall)]
	fake.getUserByProviderIDArgsForCall = append(fake.getUserByProviderIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetUserByProviderIDStub
	fakeReturns := fake.getUserByProviderIDReturns
	fake.recordInvocation("GetUserByProviderID", []interface{}{arg1, arg2, arg3})
	fake.getUserByProviderIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetUserByProviderIDCallCount() int {
	fake.getUserByProviderIDMutex.RLock()
	defer fake.getUserByProviderIDMutex.RUnlock()
	return len(fake.getUserByProviderIDArgsForCall)
}

func (fake *FakeUserRepository) GetUserByProviderIDCalls(stub func(context.Context, string, string) (*domain.User, error)) {
	fake.getUserByProviderIDMutex.Lock()
	defer fake.getUserByProviderIDMutex.Unlock()
	fake.GetUserByProviderIDStub = stub
}

func (fake *FakeUserRepository) GetUserByProviderIDArgsForCall(i int) (context.Context, string, string) {
	fake.getUserByProviderIDMutex.RLock()
	defer fake.getUserByProviderIDMutex.RUnlock()
	argsForCall := fake.getUserByProviderIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) GetUserByProviderIDReturns(result1 *domain.User, result2 error) {
	fake.getUserByProviderIDMutex.Lock()
	defer fake.getUserByProviderIDMutex.Unlock()
	fake.GetUserByProviderIDStub = nil
	fake.getUserByProviderIDReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetUserByProviderIDReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.getUserByProviderIDMutex.Lock()
	defer fake.getUserByProviderIDMutex.Unlock()
	fake.GetUserByProviderIDStub = nil
	if fake.getUserByProviderIDReturnsOnCall == nil {
		fake.getUserByProviderIDReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.getUserByProviderIDReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) UpdatePassword(arg1 context.Context, arg2 uuid.UUID, arg3 string) error {
	fake.updatePasswordMutex.Lock()
	ret, specificReturn := fake.updatePasswordReturnsOnCall[len(fake.updatePasswordArgsForCall)]
	fake.updatePasswordArgsForCall = append(fake.updatePasswordArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdatePasswordStub
	fakeReturns := fake.updatePasswordReturns
	fake.recordInvocation("UpdatePassword", []interface{}{arg1, arg2, arg3})
	fake.updatePasswordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) UpdatePasswordCallCount() int {
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	return len(fake.updatePasswordArgsForCall)
}

func (fake *FakeUserRepository) UpdatePasswordCalls(stub func(context.Context, uuid.UUID, string) error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = stub
}

func (fake *FakeUserRepository) UpdatePasswordArgsForCall(i int) (context.Context, uuid.UUID, string) {
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	argsForCall := fake.updatePasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) UpdatePasswordReturns(result1 error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = nil
	fake.updatePasswordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UpdatePasswordReturnsOnCall(i int, result1 error) {
	fake.updatePasswordMutex.Lock()
	defer fake.updatePasswordMutex.Unlock()
	fake.UpdatePasswordStub = nil
	if fake.updatePasswordReturnsOnCall == nil {
		fake.updatePasswordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updatePasswordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UpdateUser(arg1 context.Context, arg2 domain.User) (*domain.User, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 domain.User
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserRepository) UpdateUserCalls(stub func(context.Context, domain.User) (*domain.User, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserRepository) UpdateUserArgsForCall(i int) (context.Context, domain.User) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) UpdateUserReturns(result1 *domain.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) UpdateUserReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ValidateWebOAuthUser(arg1 context.Context, arg2 string, arg3 string) (*domain.User, error) {
	fake.validateWebOAuthUserMutex.Lock()
	ret, specificReturn := fake.validateWebOAuthUserReturnsOnCall[len(fake.validateWebOAuthUserArgsForCall)]
	fake.validateWebOAuthUserArgsForCall = append(fake.validateWebOAuthUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ValidateWebOAuthUserStub
	fakeReturns := fake.validateWebOAuthUserReturns
	fake.recordInvocation("ValidateWebOAuthUser", []interface{}{arg1, arg2, arg3})
	fake.validateWebOAuthUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) ValidateWebOAuthUserCallCount() int {
	fake.validateWebOAuthUserMutex.RLock()
	defer fake.validateWebOAuthUserMutex.RUnlock()
	return len(fake.validateWebOAuthUserArgsForCall)
}

func (fake *FakeUserRepository) ValidateWebOAuthUserCalls(stub func(context.Context, string, string) (*domain.User, error)) {
	fake.validateWebOAuthUserMutex.Lock()
	defer fake.validateWebOAuthUserMutex.Unlock()
	fake.ValidateWebOAuthUserStub = stub
}

func (fake *FakeUserRepository) ValidateWebOAuthUserArgsForCall(i int) (context.Context, string, string) {
	fake.validateWebOAuthUserMutex.RLock()
	defer fake.validateWebOAuthUserMutex.RUnlock()
	argsForCall := fake.validateWebOAuthUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) ValidateWebOAuthUserReturns(result1 *domain.User, result2 error) {
	fake.validateWebOAuthUserMutex.Lock()
	defer fake.validateWebOAuthUserMutex.Unlock()
	fake.ValidateWebOAuthUserStub = nil
	fake.validateWebOAuthUserReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ValidateWebOAuthUserReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.validateWebOAuthUserMutex.Lock()
	defer fake.validateWebOAuthUserMutex.Unlock()
	fake.ValidateWebOAuthUserStub = nil
	if fake.validateWebOAuthUserReturnsOnCall == nil {
		fake.validateWebOAuthUserReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.validateWebOAuthUserReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.getUserByEmailMutex.RLock()
	defer fake.getUserByEmailMutex.RUnlock()
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	fake.getUserByProviderIDMutex.RLock()
	defer fake.getUserByProviderIDMutex.RUnlock()
	fake.updatePasswordMutex.RLock()
	defer fake.updatePasswordMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	fake.validateWebOAuthUserMutex.RLock()
	defer fake.validateWebOAuthUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ports.UserRepository = new(FakeUserRepository)
