// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/demola234/defifundr/internal/core/domain"
	"github.com/demola234/defifundr/internal/core/ports"
	"github.com/google/uuid"
)

type FakeAuthService struct {
	GenerateOTPStub        func(context.Context, uuid.UUID, domain.OTPPurpose, string) (*domain.OTPVerification, error)
	generateOTPMutex       sync.RWMutex
	generateOTPArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 domain.OTPPurpose
		arg4 string
	}
	generateOTPReturns struct {
		result1 *domain.OTPVerification
		result2 error
	}
	generateOTPReturnsOnCall map[int]struct {
		result1 *domain.OTPVerification
		result2 error
	}
	LoginStub        func(context.Context, string, string, string, string) (*domain.Session, *domain.User, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	loginReturns struct {
		result1 *domain.Session
		result2 *domain.User
		result3 error
	}
	loginReturnsOnCall map[int]struct {
		result1 *domain.Session
		result2 *domain.User
		result3 error
	}
	LogoutStub        func(context.Context, uuid.UUID) error
	logoutMutex       sync.RWMutex
	logoutArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	logoutReturns struct {
		result1 error
	}
	logoutReturnsOnCall map[int]struct {
		result1 error
	}
	RefreshTokenStub        func(context.Context, string, string, string) (*domain.Session, string, error)
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	refreshTokenReturns struct {
		result1 *domain.Session
		result2 string
		result3 error
	}
	refreshTokenReturnsOnCall map[int]struct {
		result1 *domain.Session
		result2 string
		result3 error
	}
	RegisterUserStub        func(context.Context, domain.User, string) (*domain.User, error)
	registerUserMutex       sync.RWMutex
	registerUserArgsForCall []struct {
		arg1 context.Context
		arg2 domain.User
		arg3 string
	}
	registerUserReturns struct {
		result1 *domain.User
		result2 error
	}
	registerUserReturnsOnCall map[int]struct {
		result1 *domain.User
		result2 error
	}
	VerifyEmailStub        func(context.Context, uuid.UUID, string) error
	verifyEmailMutex       sync.RWMutex
	verifyEmailArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}
	verifyEmailReturns struct {
		result1 error
	}
	verifyEmailReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyOTPStub        func(context.Context, uuid.UUID, domain.OTPPurpose, string) error
	verifyOTPMutex       sync.RWMutex
	verifyOTPArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 domain.OTPPurpose
		arg4 string
	}
	verifyOTPReturns struct {
		result1 error
	}
	verifyOTPReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthService) GenerateOTP(arg1 context.Context, arg2 uuid.UUID, arg3 domain.OTPPurpose, arg4 string) (*domain.OTPVerification, error) {
	fake.generateOTPMutex.Lock()
	ret, specificReturn := fake.generateOTPReturnsOnCall[len(fake.generateOTPArgsForCall)]
	fake.generateOTPArgsForCall = append(fake.generateOTPArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 domain.OTPPurpose
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GenerateOTPStub
	fakeReturns := fake.generateOTPReturns
	fake.recordInvocation("GenerateOTP", []interface{}{arg1, arg2, arg3, arg4})
	fake.generateOTPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthService) GenerateOTPCallCount() int {
	fake.generateOTPMutex.RLock()
	defer fake.generateOTPMutex.RUnlock()
	return len(fake.generateOTPArgsForCall)
}

func (fake *FakeAuthService) GenerateOTPCalls(stub func(context.Context, uuid.UUID, domain.OTPPurpose, string) (*domain.OTPVerification, error)) {
	fake.generateOTPMutex.Lock()
	defer fake.generateOTPMutex.Unlock()
	fake.GenerateOTPStub = stub
}

func (fake *FakeAuthService) GenerateOTPArgsForCall(i int) (context.Context, uuid.UUID, domain.OTPPurpose, string) {
	fake.generateOTPMutex.RLock()
	defer fake.generateOTPMutex.RUnlock()
	argsForCall := fake.generateOTPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAuthService) GenerateOTPReturns(result1 *domain.OTPVerification, result2 error) {
	fake.generateOTPMutex.Lock()
	defer fake.generateOTPMutex.Unlock()
	fake.GenerateOTPStub = nil
	fake.generateOTPReturns = struct {
		result1 *domain.OTPVerification
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthService) GenerateOTPReturnsOnCall(i int, result1 *domain.OTPVerification, result2 error) {
	fake.generateOTPMutex.Lock()
	defer fake.generateOTPMutex.Unlock()
	fake.GenerateOTPStub = nil
	if fake.generateOTPReturnsOnCall == nil {
		fake.generateOTPReturnsOnCall = make(map[int]struct {
			result1 *domain.OTPVerification
			result2 error
		})
	}
	fake.generateOTPReturnsOnCall[i] = struct {
		result1 *domain.OTPVerification
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthService) Login(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) (*domain.Session, *domain.User, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuthService) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeAuthService) LoginCalls(stub func(context.Context, string, string, string, string) (*domain.Session, *domain.User, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeAuthService) LoginArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAuthService) LoginReturns(result1 *domain.Session, result2 *domain.User, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 *domain.Session
		result2 *domain.User
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthService) LoginReturnsOnCall(i int, result1 *domain.Session, result2 *domain.User, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 *domain.Session
			result2 *domain.User
			result3 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 *domain.Session
		result2 *domain.User
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthService) Logout(arg1 context.Context, arg2 uuid.UUID) error {
	fake.logoutMutex.Lock()
	ret, specificReturn := fake.logoutReturnsOnCall[len(fake.logoutArgsForCall)]
	fake.logoutArgsForCall = append(fake.logoutArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.LogoutStub
	fakeReturns := fake.logoutReturns
	fake.recordInvocation("Logout", []interface{}{arg1, arg2})
	fake.logoutMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthService) LogoutCallCount() int {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return len(fake.logoutArgsForCall)
}

func (fake *FakeAuthService) LogoutCalls(stub func(context.Context, uuid.UUID) error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = stub
}

func (fake *FakeAuthService) LogoutArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	argsForCall := fake.logoutArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthService) LogoutReturns(result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	fake.logoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) LogoutReturnsOnCall(i int, result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	if fake.logoutReturnsOnCall == nil {
		fake.logoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) RefreshToken(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*domain.Session, string, error) {
	fake.refreshTokenMutex.Lock()
	ret, specificReturn := fake.refreshTokenReturnsOnCall[len(fake.refreshTokenArgsForCall)]
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.RefreshTokenStub
	fakeReturns := fake.refreshTokenReturns
	fake.recordInvocation("RefreshToken", []interface{}{arg1, arg2, arg3, arg4})
	fake.refreshTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuthService) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeAuthService) RefreshTokenCalls(stub func(context.Context, string, string, string) (*domain.Session, string, error)) {
	fake.refreshTokenMutex.Lock()
	defer fake.refreshTokenMutex.Unlock()
	fake.RefreshTokenStub = stub
}

func (fake *FakeAuthService) RefreshTokenArgsForCall(i int) (context.Context, string, string, string) {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	argsForCall := fake.refreshTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAuthService) RefreshTokenReturns(result1 *domain.Session, result2 string, result3 error) {
	fake.refreshTokenMutex.Lock()
	defer fake.refreshTokenMutex.Unlock()
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 *domain.Session
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthService) RefreshTokenReturnsOnCall(i int, result1 *domain.Session, result2 string, result3 error) {
	fake.refreshTokenMutex.Lock()
	defer fake.refreshTokenMutex.Unlock()
	fake.RefreshTokenStub = nil
	if fake.refreshTokenReturnsOnCall == nil {
		fake.refreshTokenReturnsOnCall = make(map[int]struct {
			result1 *domain.Session
			result2 string
			result3 error
		})
	}
	fake.refreshTokenReturnsOnCall[i] = struct {
		result1 *domain.Session
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthService) RegisterUser(arg1 context.Context, arg2 domain.User, arg3 string) (*domain.User, error) {
	fake.registerUserMutex.Lock()
	ret, specificReturn := fake.registerUserReturnsOnCall[len(fake.registerUserArgsForCall)]
	fake.registerUserArgsForCall = append(fake.registerUserArgsForCall, struct {
		arg1 context.Context
		arg2 domain.User
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RegisterUserStub
	fakeReturns := fake.registerUserReturns
	fake.recordInvocation("RegisterUser", []interface{}{arg1, arg2, arg3})
	fake.registerUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthService) RegisterUserCallCount() int {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	return len(fake.registerUserArgsForCall)
}

func (fake *FakeAuthService) RegisterUserCalls(stub func(context.Context, domain.User, string) (*domain.User, error)) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = stub
}

func (fake *FakeAuthService) RegisterUserArgsForCall(i int) (context.Context, domain.User, string) {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	argsForCall := fake.registerUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthService) RegisterUserReturns(result1 *domain.User, result2 error) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = nil
	fake.registerUserReturns = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthService) RegisterUserReturnsOnCall(i int, result1 *domain.User, result2 error) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = nil
	if fake.registerUserReturnsOnCall == nil {
		fake.registerUserReturnsOnCall = make(map[int]struct {
			result1 *domain.User
			result2 error
		})
	}
	fake.registerUserReturnsOnCall[i] = struct {
		result1 *domain.User
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthService) VerifyEmail(arg1 context.Context, arg2 uuid.UUID, arg3 string) error {
	fake.verifyEmailMutex.Lock()
	ret, specificReturn := fake.verifyEmailReturnsOnCall[len(fake.verifyEmailArgsForCall)]
	fake.verifyEmailArgsForCall = append(fake.verifyEmailArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.VerifyEmailStub
	fakeReturns := fake.verifyEmailReturns
	fake.recordInvocation("VerifyEmail", []interface{}{arg1, arg2, arg3})
	fake.verifyEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthService) VerifyEmailCallCount() int {
	fake.verifyEmailMutex.RLock()
	defer fake.verifyEmailMutex.RUnlock()
	return len(fake.verifyEmailArgsForCall)
}

func (fake *FakeAuthService) VerifyEmailCalls(stub func(context.Context, uuid.UUID, string) error) {
	fake.verifyEmailMutex.Lock()
	defer fake.verifyEmailMutex.Unlock()
	fake.VerifyEmailStub = stub
}

func (fake *FakeAuthService) VerifyEmailArgsForCall(i int) (context.Context, uuid.UUID, string) {
	fake.verifyEmailMutex.RLock()
	defer fake.verifyEmailMutex.RUnlock()
	argsForCall := fake.verifyEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuthService) VerifyEmailReturns(result1 error) {
	fake.verifyEmailMutex.Lock()
	defer fake.verifyEmailMutex.Unlock()
	fake.VerifyEmailStub = nil
	fake.verifyEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) VerifyEmailReturnsOnCall(i int, result1 error) {
	fake.verifyEmailMutex.Lock()
	defer fake.verifyEmailMutex.Unlock()
	fake.VerifyEmailStub = nil
	if fake.verifyEmailReturnsOnCall == nil {
		fake.verifyEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) VerifyOTP(arg1 context.Context, arg2 uuid.UUID, arg3 domain.OTPPurpose, arg4 string) error {
	fake.verifyOTPMutex.Lock()
	ret, specificReturn := fake.verifyOTPReturnsOnCall[len(fake.verifyOTPArgsForCall)]
	fake.verifyOTPArgsForCall = append(fake.verifyOTPArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 domain.OTPPurpose
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.VerifyOTPStub
	fakeReturns := fake.verifyOTPReturns
	fake.recordInvocation("VerifyOTP", []interface{}{arg1, arg2, arg3, arg4})
	fake.verifyOTPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthService) VerifyOTPCallCount() int {
	fake.verifyOTPMutex.RLock()
	defer fake.verifyOTPMutex.RUnlock()
	return len(fake.verifyOTPArgsForCall)
}

func (fake *FakeAuthService) VerifyOTPCalls(stub func(context.Context, uuid.UUID, domain.OTPPurpose, string) error) {
	fake.verifyOTPMutex.Lock()
	defer fake.verifyOTPMutex.Unlock()
	fake.VerifyOTPStub = stub
}

func (fake *FakeAuthService) VerifyOTPArgsForCall(i int) (context.Context, uuid.UUID, domain.OTPPurpose, string) {
	fake.verifyOTPMutex.RLock()
	defer fake.verifyOTPMutex.RUnlock()
	argsForCall := fake.verifyOTPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeAuthService) VerifyOTPReturns(result1 error) {
	fake.verifyOTPMutex.Lock()
	defer fake.verifyOTPMutex.Unlock()
	fake.VerifyOTPStub = nil
	fake.verifyOTPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) VerifyOTPReturnsOnCall(i int, result1 error) {
	fake.verifyOTPMutex.Lock()
	defer fake.verifyOTPMutex.Unlock()
	fake.VerifyOTPStub = nil
	if fake.verifyOTPReturnsOnCall == nil {
		fake.verifyOTPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyOTPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateOTPMutex.RLock()
	defer fake.generateOTPMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	fake.verifyEmailMutex.RLock()
	defer fake.verifyEmailMutex.RUnlock()
	fake.verifyOTPMutex.RLock()
	defer fake.verifyOTPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ports.AuthService = new(FakeAuthService)
