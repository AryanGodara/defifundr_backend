// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: campaign_type.sql

package db

import (
	"context"
)

const createCampaignType = `-- name: CreateCampaignType :one

INSERT INTO
    campaign_types (campaign_types)
VALUES ($1) RETURNING id, campaign_types
`

func (q *Queries) CreateCampaignType(ctx context.Context, campaignTypes string) (CampaignTypes, error) {
	row := q.db.QueryRowContext(ctx, createCampaignType, campaignTypes)
	var i CampaignTypes
	err := row.Scan(&i.ID, &i.CampaignTypes)
	return i, err
}

const getAllCampaignType = `-- name: GetAllCampaignType :many

SELECT id, campaign_types FROM campaign_types
`

func (q *Queries) GetAllCampaignType(ctx context.Context) ([]CampaignTypes, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaignType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignTypes{}
	for rows.Next() {
		var i CampaignTypes
		if err := rows.Scan(&i.ID, &i.CampaignTypes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
