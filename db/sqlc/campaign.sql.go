// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: campaign.sql

package db

import (
	"context"
)

const createCampaignType = `-- name: CreateCampaignType :one

INSERT INTO
    campaigns (campaign_name)
VALUES ($1) RETURNING id, image, campaign_name
`

func (q *Queries) CreateCampaignType(ctx context.Context, campaignName string) (Campaigns, error) {
	row := q.db.QueryRowContext(ctx, createCampaignType, campaignName)
	var i Campaigns
	err := row.Scan(&i.ID, &i.Image, &i.CampaignName)
	return i, err
}

const getAllCampaignType = `-- name: GetAllCampaignType :many
SELECT id, image, campaign_name FROM campaigns
`

func (q *Queries) GetAllCampaignType(ctx context.Context) ([]Campaigns, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaignType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaigns{}
	for rows.Next() {
		var i Campaigns
		if err := rows.Scan(&i.ID, &i.Image, &i.CampaignName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
