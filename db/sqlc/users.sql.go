// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS (
        SELECT 1
        FROM users
        WHERE
            email = $1
        LIMIT 1
    ) AS exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countSearchUsers = `-- name: CountSearchUsers :one
SELECT COUNT(*)
FROM users
WHERE 
  (
    first_name ILIKE '%' || $1 || '%' OR
    last_name ILIKE '%' || $1 || '%' OR
    email ILIKE '%' || $1 || '%' OR
    nationality ILIKE '%' || $1 || '%'
  )
`

// Counts the number of users matching a search query
func (q *Queries) CountSearchUsers(ctx context.Context, dollar_1 pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchUsers, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

// Counts the total number of users (useful for pagination)
func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByAccountType = `-- name: CountUsersByAccountType :one
SELECT COUNT(*) FROM users
WHERE account_type = $1
`

// Counts users filtered by account type
func (q *Queries) CountUsersByAccountType(ctx context.Context, accountType string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByAccountType, accountType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  email,
  password_hash,
  profile_picture,
  account_type,
  gender,
  personal_account_type,
  first_name,
  last_name,
  nationality,
  residential_country,
  job_role,
  company_name,
  company_address,
  company_city,
  company_postal_code,
  company_country,
  auth_provider,
  provider_id,
  employee_type,
  company_website,
  employment_type,
  created_at,
  updated_at
) VALUES (
  COALESCE($1, uuid_generate_v4()),
  $2,
  $3,
  COALESCE($4, ''),
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  COALESCE($13, ''),
  COALESCE($14, ''),
  COALESCE($15, ''),
  COALESCE($16, ''),
  COALESCE($17, ''),
  $18,
  $19,
  $20,
  COALESCE($21, ''),
  COALESCE($22, ''),
  COALESCE($23, now()),
  COALESCE($24, now())
) RETURNING id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
`

type CreateUserParams struct {
	ID                  interface{} `json:"id"`
	Email               string      `json:"email"`
	PasswordHash        pgtype.Text `json:"password_hash"`
	ProfilePicture      interface{} `json:"profile_picture"`
	AccountType         string      `json:"account_type"`
	Gender              pgtype.Text `json:"gender"`
	PersonalAccountType string      `json:"personal_account_type"`
	FirstName           string      `json:"first_name"`
	LastName            string      `json:"last_name"`
	Nationality         string      `json:"nationality"`
	ResidentialCountry  pgtype.Text `json:"residential_country"`
	JobRole             pgtype.Text `json:"job_role"`
	CompanyName         interface{} `json:"company_name"`
	CompanyAddress      interface{} `json:"company_address"`
	CompanyCity         interface{} `json:"company_city"`
	CompanyPostalCode   interface{} `json:"company_postal_code"`
	CompanyCountry      interface{} `json:"company_country"`
	AuthProvider        pgtype.Text `json:"auth_provider"`
	ProviderID          pgtype.Text `json:"provider_id"`
	EmployeeType        pgtype.Text `json:"employee_type"`
	CompanyWebsite      interface{} `json:"company_website"`
	EmploymentType      interface{} `json:"employment_type"`
	CreatedAt           interface{} `json:"created_at"`
	UpdatedAt           interface{} `json:"updated_at"`
}

// Creates a new user record and returns the created user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.ProfilePicture,
		arg.AccountType,
		arg.Gender,
		arg.PersonalAccountType,
		arg.FirstName,
		arg.LastName,
		arg.Nationality,
		arg.ResidentialCountry,
		arg.JobRole,
		arg.CompanyName,
		arg.CompanyAddress,
		arg.CompanyCity,
		arg.CompanyPostalCode,
		arg.CompanyCountry,
		arg.AuthProvider,
		arg.ProviderID,
		arg.EmployeeType,
		arg.CompanyWebsite,
		arg.EmploymentType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProfilePicture,
		&i.AccountType,
		&i.Gender,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyName,
		&i.CompanyAddress,
		&i.CompanyCity,
		&i.CompanyPostalCode,
		&i.CompanyCountry,
		&i.EmployeeType,
		&i.AuthProvider,
		&i.ProviderID,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Permanently deletes a user record
func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at FROM users WHERE id = $1 OR id::text = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProfilePicture,
		&i.AccountType,
		&i.Gender,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyName,
		&i.CompanyAddress,
		&i.CompanyCity,
		&i.CompanyPostalCode,
		&i.CompanyCountry,
		&i.EmployeeType,
		&i.AuthProvider,
		&i.ProviderID,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

// Retrieves a single user by their email address
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProfilePicture,
		&i.AccountType,
		&i.Gender,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyName,
		&i.CompanyAddress,
		&i.CompanyCity,
		&i.CompanyPostalCode,
		&i.CompanyCountry,
		&i.EmployeeType,
		&i.AuthProvider,
		&i.ProviderID,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
FROM users
ORDER BY 
  CASE WHEN $3::text = 'ASC' THEN created_at END ASC,
  CASE WHEN $3::text = 'DESC' OR $3::text IS NULL THEN created_at END DESC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	Column3 string `json:"column_3"`
}

// Lists users with pagination support
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.ProfilePicture,
			&i.AccountType,
			&i.Gender,
			&i.PersonalAccountType,
			&i.FirstName,
			&i.LastName,
			&i.Nationality,
			&i.ResidentialCountry,
			&i.JobRole,
			&i.CompanyName,
			&i.CompanyAddress,
			&i.CompanyCity,
			&i.CompanyPostalCode,
			&i.CompanyCountry,
			&i.EmployeeType,
			&i.AuthProvider,
			&i.ProviderID,
			&i.CompanyWebsite,
			&i.EmploymentType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByAccountType = `-- name: ListUsersByAccountType :many
SELECT id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
FROM users
WHERE account_type = $3
ORDER BY 
  CASE WHEN $4::text = 'ASC' THEN created_at END ASC,
  CASE WHEN $4::text = 'DESC' OR $4::text IS NULL THEN created_at END DESC
LIMIT $1
OFFSET $2
`

type ListUsersByAccountTypeParams struct {
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
	AccountType string `json:"account_type"`
	Column4     string `json:"column_4"`
}

// Lists users filtered by account type with pagination
func (q *Queries) ListUsersByAccountType(ctx context.Context, arg ListUsersByAccountTypeParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, listUsersByAccountType,
		arg.Limit,
		arg.Offset,
		arg.AccountType,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.ProfilePicture,
			&i.AccountType,
			&i.Gender,
			&i.PersonalAccountType,
			&i.FirstName,
			&i.LastName,
			&i.Nationality,
			&i.ResidentialCountry,
			&i.JobRole,
			&i.CompanyName,
			&i.CompanyAddress,
			&i.CompanyCity,
			&i.CompanyPostalCode,
			&i.CompanyCountry,
			&i.EmployeeType,
			&i.AuthProvider,
			&i.ProviderID,
			&i.CompanyWebsite,
			&i.EmploymentType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
FROM users
WHERE 
  (
    first_name ILIKE '%' || $3 || '%' OR
    last_name ILIKE '%' || $3 || '%' OR
    email ILIKE '%' || $3 || '%' OR
    nationality ILIKE '%' || $3 || '%'
  )
ORDER BY
  CASE WHEN $4::text = 'ASC' THEN created_at END ASC,
  CASE WHEN $4::text = 'DESC' OR $4::text IS NULL THEN created_at END DESC
LIMIT $1
OFFSET $2
`

type SearchUsersParams struct {
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	Column3 pgtype.Text `json:"column_3"`
	Column4 string      `json:"column_4"`
}

// Searches for users by name, email, or nationality with pagination
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]Users, error) {
	rows, err := q.db.Query(ctx, searchUsers,
		arg.Limit,
		arg.Offset,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.ProfilePicture,
			&i.AccountType,
			&i.Gender,
			&i.PersonalAccountType,
			&i.FirstName,
			&i.LastName,
			&i.Nationality,
			&i.ResidentialCountry,
			&i.JobRole,
			&i.CompanyName,
			&i.CompanyAddress,
			&i.CompanyCity,
			&i.CompanyPostalCode,
			&i.CompanyCountry,
			&i.EmployeeType,
			&i.AuthProvider,
			&i.ProviderID,
			&i.CompanyWebsite,
			&i.EmploymentType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = COALESCE($2, email),
  profile_picture = $3,
  account_type = COALESCE($4, account_type),
  gender = $5,
  personal_account_type = COALESCE($6, personal_account_type),
  first_name = COALESCE($7, first_name),
  last_name = COALESCE($8, last_name),
  nationality = COALESCE($9, nationality),
  residential_country = $10,
  job_role = $11,
  company_website = $12,
  employment_type = $13,
  company_name = $14,
  company_address = $15,
  company_city = $16,
  company_postal_code = $17,
  company_country = $18,
  auth_provider = COALESCE($19, auth_provider),
  provider_id = COALESCE($20, provider_id),
  updated_at = now()
WHERE id = $1
RETURNING id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
`

type UpdateUserParams struct {
	ID                  uuid.UUID   `json:"id"`
	Email               string      `json:"email"`
	ProfilePicture      pgtype.Text `json:"profile_picture"`
	AccountType         string      `json:"account_type"`
	Gender              pgtype.Text `json:"gender"`
	PersonalAccountType string      `json:"personal_account_type"`
	FirstName           string      `json:"first_name"`
	LastName            string      `json:"last_name"`
	Nationality         string      `json:"nationality"`
	ResidentialCountry  pgtype.Text `json:"residential_country"`
	JobRole             pgtype.Text `json:"job_role"`
	CompanyWebsite      pgtype.Text `json:"company_website"`
	EmploymentType      pgtype.Text `json:"employment_type"`
	CompanyName         pgtype.Text `json:"company_name"`
	CompanyAddress      pgtype.Text `json:"company_address"`
	CompanyCity         pgtype.Text `json:"company_city"`
	CompanyPostalCode   pgtype.Text `json:"company_postal_code"`
	CompanyCountry      pgtype.Text `json:"company_country"`
	AuthProvider        pgtype.Text `json:"auth_provider"`
	ProviderID          pgtype.Text `json:"provider_id"`
}

// Updates user details and returns the updated user
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.ProfilePicture,
		arg.AccountType,
		arg.Gender,
		arg.PersonalAccountType,
		arg.FirstName,
		arg.LastName,
		arg.Nationality,
		arg.ResidentialCountry,
		arg.JobRole,
		arg.CompanyWebsite,
		arg.EmploymentType,
		arg.CompanyName,
		arg.CompanyAddress,
		arg.CompanyCity,
		arg.CompanyPostalCode,
		arg.CompanyCountry,
		arg.AuthProvider,
		arg.ProviderID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProfilePicture,
		&i.AccountType,
		&i.Gender,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyName,
		&i.CompanyAddress,
		&i.CompanyCity,
		&i.CompanyPostalCode,
		&i.CompanyCountry,
		&i.EmployeeType,
		&i.AuthProvider,
		&i.ProviderID,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users
SET
  email = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, email, password_hash, profile_picture, account_type, gender, personal_account_type, first_name, last_name, nationality, residential_country, job_role, company_name, company_address, company_city, company_postal_code, company_country, employee_type, auth_provider, provider_id, company_website, employment_type, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

// Updates a user's email address with validation that the new email is unique
func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.ProfilePicture,
		&i.AccountType,
		&i.Gender,
		&i.PersonalAccountType,
		&i.FirstName,
		&i.LastName,
		&i.Nationality,
		&i.ResidentialCountry,
		&i.JobRole,
		&i.CompanyName,
		&i.CompanyAddress,
		&i.CompanyCity,
		&i.CompanyPostalCode,
		&i.CompanyCountry,
		&i.EmployeeType,
		&i.AuthProvider,
		&i.ProviderID,
		&i.CompanyWebsite,
		&i.EmploymentType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
  password_hash = $2,
  updated_at = now()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID   `json:"id"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

// Updates a user's password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
