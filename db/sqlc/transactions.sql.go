// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

// Permanently deletes a transaction record
func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const deleteTransactionsByUserID = `-- name: DeleteTransactionsByUserID :exec
DELETE FROM transactions
WHERE user_id = $1
`

// Deletes all transactions for a specific user
func (q *Queries) DeleteTransactionsByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransactionsByUserID, userID)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at FROM transactions
WHERE id = $1
LIMIT 1
`

// Retrieves a single transaction by its ID
func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transactions, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TxHash,
		&i.TransactionPinHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByTxHash = `-- name: GetTransactionByTxHash :one
SELECT id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at FROM transactions
WHERE tx_hash = $1
LIMIT 1
`

// Retrieves a single transaction by its transaction hash
func (q *Queries) GetTransactionByTxHash(ctx context.Context, txHash string) (Transactions, error) {
	row := q.db.QueryRow(ctx, getTransactionByTxHash, txHash)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TxHash,
		&i.TransactionPinHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByStatus = `-- name: GetTransactionsByStatus :many
SELECT id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at FROM transactions
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetTransactionsByStatusParams struct {
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

// Retrieves transactions by status
func (q *Queries) GetTransactionsByStatus(ctx context.Context, arg GetTransactionsByStatusParams) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getTransactionsByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxHash,
			&i.TransactionPinHash,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserID = `-- name: GetTransactionsByUserID :many
SELECT id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at FROM transactions
WHERE user_id = $1
ORDER BY created_at DESC
`

// Retrieves all transactions for a specific user
func (q *Queries) GetTransactionsByUserID(ctx context.Context, userID uuid.UUID) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxHash,
			&i.TransactionPinHash,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserIDAndStatus = `-- name: GetTransactionsByUserIDAndStatus :many
SELECT id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at FROM transactions
WHERE user_id = $1 AND status = $2
ORDER BY created_at DESC
`

type GetTransactionsByUserIDAndStatusParams struct {
	UserID uuid.UUID `json:"user_id"`
	Status string    `json:"status"`
}

// Retrieves transactions for a specific user with a specific status
func (q *Queries) GetTransactionsByUserIDAndStatus(ctx context.Context, arg GetTransactionsByUserIDAndStatusParams) ([]Transactions, error) {
	rows, err := q.db.Query(ctx, getTransactionsByUserIDAndStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transactions{}
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TxHash,
			&i.TransactionPinHash,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET
  status = COALESCE($2, status),
  transaction_pin_hash = COALESCE($3, transaction_pin_hash),
  updated_at = now()
WHERE id = $1
RETURNING id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at
`

type UpdateTransactionParams struct {
	ID                 uuid.UUID `json:"id"`
	Status             string    `json:"status"`
	TransactionPinHash string    `json:"transaction_pin_hash"`
}

// Updates transaction details and returns the updated transaction
func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transactions, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.ID, arg.Status, arg.TransactionPinHash)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TxHash,
		&i.TransactionPinHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :one
UPDATE transactions
SET
  status = $2,
  updated_at = now()
WHERE id = $1
RETURNING id, user_id, tx_hash, transaction_pin_hash, status, created_at, updated_at
`

type UpdateTransactionStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

// Updates the status of a transaction and returns the updated transaction
func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (Transactions, error) {
	row := q.db.QueryRow(ctx, updateTransactionStatus, arg.ID, arg.Status)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TxHash,
		&i.TransactionPinHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
