// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otp_verifications.sql

package sqlc

import (
	"context"
	"net/netip"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countActiveOTPsForUser = `-- name: CountActiveOTPsForUser :one
SELECT COUNT(*) 
FROM otp_verifications
WHERE user_id = $1 
  AND purpose = $2 
  AND is_verified = false 
  AND expires_at > NOW()
`

type CountActiveOTPsForUserParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Purpose OtpPurpose  `json:"purpose"`
}

func (q *Queries) CountActiveOTPsForUser(ctx context.Context, arg CountActiveOTPsForUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveOTPsForUser, arg.UserID, arg.Purpose)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOTPVerification = `-- name: CreateOTPVerification :one
INSERT INTO otp_verifications (
    user_id,
    otp_code,
    hashed_otp,
    purpose,
    contact_method,
    attempts_made,
    max_attempts,
    expires_at,
    ip_address,
    user_agent,
    device_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id
`

type CreateOTPVerificationParams struct {
	UserID        pgtype.UUID `json:"user_id"`
	OtpCode       string      `json:"otp_code"`
	HashedOtp     string      `json:"hashed_otp"`
	Purpose       OtpPurpose  `json:"purpose"`
	ContactMethod pgtype.Text `json:"contact_method"`
	AttemptsMade  int32       `json:"attempts_made"`
	MaxAttempts   int32       `json:"max_attempts"`
	ExpiresAt     time.Time   `json:"expires_at"`
	IpAddress     *netip.Addr `json:"ip_address"`
	UserAgent     pgtype.Text `json:"user_agent"`
	DeviceID      pgtype.UUID `json:"device_id"`
}

func (q *Queries) CreateOTPVerification(ctx context.Context, arg CreateOTPVerificationParams) (OtpVerifications, error) {
	row := q.db.QueryRow(ctx, createOTPVerification,
		arg.UserID,
		arg.OtpCode,
		arg.HashedOtp,
		arg.Purpose,
		arg.ContactMethod,
		arg.AttemptsMade,
		arg.MaxAttempts,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
		arg.DeviceID,
	)
	var i OtpVerifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.HashedOtp,
		&i.Purpose,
		&i.ContactMethod,
		&i.AttemptsMade,
		&i.MaxAttempts,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceID,
	)
	return i, err
}

const deleteExpiredOTPs = `-- name: DeleteExpiredOTPs :exec
DELETE FROM otp_verifications
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredOTPs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredOTPs)
	return err
}

const getOTPVerificationByID = `-- name: GetOTPVerificationByID :one
SELECT id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id FROM otp_verifications
WHERE id = $1
`

func (q *Queries) GetOTPVerificationByID(ctx context.Context, id uuid.UUID) (OtpVerifications, error) {
	row := q.db.QueryRow(ctx, getOTPVerificationByID, id)
	var i OtpVerifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.HashedOtp,
		&i.Purpose,
		&i.ContactMethod,
		&i.AttemptsMade,
		&i.MaxAttempts,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceID,
	)
	return i, err
}

const getOTPVerificationByUserAndPurpose = `-- name: GetOTPVerificationByUserAndPurpose :one
SELECT id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id FROM otp_verifications
WHERE user_id = $1 
  AND purpose = $2 
  AND is_verified = false 
  AND expires_at > NOW()
ORDER BY created_at DESC
LIMIT 1
`

type GetOTPVerificationByUserAndPurposeParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Purpose OtpPurpose  `json:"purpose"`
}

func (q *Queries) GetOTPVerificationByUserAndPurpose(ctx context.Context, arg GetOTPVerificationByUserAndPurposeParams) (OtpVerifications, error) {
	row := q.db.QueryRow(ctx, getOTPVerificationByUserAndPurpose, arg.UserID, arg.Purpose)
	var i OtpVerifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.HashedOtp,
		&i.Purpose,
		&i.ContactMethod,
		&i.AttemptsMade,
		&i.MaxAttempts,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceID,
	)
	return i, err
}

const getUnverifiedOTPsForUser = `-- name: GetUnverifiedOTPsForUser :many
SELECT id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id FROM otp_verifications
WHERE user_id = $1 
  AND is_verified = false 
  AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetUnverifiedOTPsForUser(ctx context.Context, userID pgtype.UUID) ([]OtpVerifications, error) {
	rows, err := q.db.Query(ctx, getUnverifiedOTPsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OtpVerifications{}
	for rows.Next() {
		var i OtpVerifications
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OtpCode,
			&i.HashedOtp,
			&i.Purpose,
			&i.ContactMethod,
			&i.AttemptsMade,
			&i.MaxAttempts,
			&i.IsVerified,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.VerifiedAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const inValidateOTP = `-- name: InValidateOTP :exec
UPDATE otp_verifications
SET is_verified = false
WHERE id = $1
`

func (q *Queries) InValidateOTP(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, inValidateOTP, id)
	return err
}

const updateOTPAttempts = `-- name: UpdateOTPAttempts :one
UPDATE otp_verifications
SET attempts_made = attempts_made + 1
WHERE id = $1
RETURNING id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id
`

func (q *Queries) UpdateOTPAttempts(ctx context.Context, id uuid.UUID) (OtpVerifications, error) {
	row := q.db.QueryRow(ctx, updateOTPAttempts, id)
	var i OtpVerifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.HashedOtp,
		&i.Purpose,
		&i.ContactMethod,
		&i.AttemptsMade,
		&i.MaxAttempts,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceID,
	)
	return i, err
}

const verifyOTP = `-- name: VerifyOTP :one
UPDATE otp_verifications
SET 
    is_verified = true,
    verified_at = NOW()
WHERE id = $1
  AND otp_code = $2
  AND expires_at > NOW()
  AND attempts_made <= max_attempts
RETURNING id, user_id, otp_code, hashed_otp, purpose, contact_method, attempts_made, max_attempts, is_verified, created_at, expires_at, verified_at, ip_address, user_agent, device_id
`

type VerifyOTPParams struct {
	ID      uuid.UUID `json:"id"`
	OtpCode string    `json:"otp_code"`
}

func (q *Queries) VerifyOTP(ctx context.Context, arg VerifyOTPParams) (OtpVerifications, error) {
	row := q.db.QueryRow(ctx, verifyOTP, arg.ID, arg.OtpCode)
	var i OtpVerifications
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.HashedOtp,
		&i.Purpose,
		&i.ContactMethod,
		&i.AttemptsMade,
		&i.MaxAttempts,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.VerifiedAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceID,
	)
	return i, err
}
