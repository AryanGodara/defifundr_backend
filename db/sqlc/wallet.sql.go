// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: wallet.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one

UPDATE wallet
SET
    balance = balance + $1
WHERE
    id = $2 RETURNING id, owner, balance, address, pem_encoded, pem_encoded_pub, created_at
`

type AddAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Address,
		&i.PemEncoded,
		&i.PemEncodedPub,
		&i.CreatedAt,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one

INSERT INTO
    wallet (
        owner,
        balance,
        address,
        pem_encoded,
        pem_encoded_pub
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, owner, balance, address, pem_encoded, pem_encoded_pub, created_at
`

type CreateWalletParams struct {
	Owner         string `json:"owner"`
	Balance       int64  `json:"balance"`
	Address       string `json:"address"`
	PemEncoded    string `json:"pem_encoded"`
	PemEncodedPub string `json:"pem_encoded_pub"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet,
		arg.Owner,
		arg.Balance,
		arg.Address,
		arg.PemEncoded,
		arg.PemEncodedPub,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Address,
		&i.PemEncoded,
		&i.PemEncodedPub,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec

DELETE FROM wallet WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getWallet = `-- name: GetWallet :one

SELECT id, owner, balance, address, pem_encoded, pem_encoded_pub, created_at FROM wallet WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, owner string) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, owner)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Address,
		&i.PemEncoded,
		&i.PemEncodedPub,
		&i.CreatedAt,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :one

UPDATE wallet SET balance = $2 WHERE owner = $1 RETURNING id, owner, balance, address, pem_encoded, pem_encoded_pub, created_at
`

type UpdateWalletParams struct {
	Owner   string `json:"owner"`
	Balance int64  `json:"balance"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateWallet, arg.Owner, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Address,
		&i.PemEncoded,
		&i.PemEncodedPub,
		&i.CreatedAt,
	)
	return i, err
}
