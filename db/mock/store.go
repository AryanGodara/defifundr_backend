// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demola234/defifundr/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/demola234/defifundr/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountActiveDeviceTokensForUser mocks base method.
func (m *MockStore) CountActiveDeviceTokensForUser(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveDeviceTokensForUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveDeviceTokensForUser indicates an expected call of CountActiveDeviceTokensForUser.
func (mr *MockStoreMockRecorder) CountActiveDeviceTokensForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveDeviceTokensForUser", reflect.TypeOf((*MockStore)(nil).CountActiveDeviceTokensForUser), arg0, arg1)
}

// CountActiveOTPsForUser mocks base method.
func (m *MockStore) CountActiveOTPsForUser(arg0 context.Context, arg1 sqlc.CountActiveOTPsForUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveOTPsForUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveOTPsForUser indicates an expected call of CountActiveOTPsForUser.
func (mr *MockStoreMockRecorder) CountActiveOTPsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveOTPsForUser", reflect.TypeOf((*MockStore)(nil).CountActiveOTPsForUser), arg0, arg1)
}

// CountSearchUsers mocks base method.
func (m *MockStore) CountSearchUsers(arg0 context.Context, arg1 pgtype.Text) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSearchUsers", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSearchUsers indicates an expected call of CountSearchUsers.
func (mr *MockStoreMockRecorder) CountSearchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSearchUsers", reflect.TypeOf((*MockStore)(nil).CountSearchUsers), arg0, arg1)
}

// CountUsers mocks base method.
func (m *MockStore) CountUsers(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockStoreMockRecorder) CountUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockStore)(nil).CountUsers), arg0)
}

// CountUsersByAccountType mocks base method.
func (m *MockStore) CountUsersByAccountType(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByAccountType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByAccountType indicates an expected call of CountUsersByAccountType.
func (mr *MockStoreMockRecorder) CountUsersByAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByAccountType", reflect.TypeOf((*MockStore)(nil).CountUsersByAccountType), arg0, arg1)
}

// CreateOTPVerification mocks base method.
func (m *MockStore) CreateOTPVerification(arg0 context.Context, arg1 sqlc.CreateOTPVerificationParams) (sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOTPVerification", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOTPVerification indicates an expected call of CreateOTPVerification.
func (mr *MockStoreMockRecorder) CreateOTPVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOTPVerification", reflect.TypeOf((*MockStore)(nil).CreateOTPVerification), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 sqlc.CreateUserParams) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserDeviceToken mocks base method.
func (m *MockStore) CreateUserDeviceToken(arg0 context.Context, arg1 sqlc.CreateUserDeviceTokenParams) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDeviceToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDeviceToken indicates an expected call of CreateUserDeviceToken.
func (mr *MockStoreMockRecorder) CreateUserDeviceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDeviceToken", reflect.TypeOf((*MockStore)(nil).CreateUserDeviceToken), arg0, arg1)
}

// DeleteExpiredDeviceTokens mocks base method.
func (m *MockStore) DeleteExpiredDeviceTokens(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredDeviceTokens", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredDeviceTokens indicates an expected call of DeleteExpiredDeviceTokens.
func (mr *MockStoreMockRecorder) DeleteExpiredDeviceTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredDeviceTokens", reflect.TypeOf((*MockStore)(nil).DeleteExpiredDeviceTokens), arg0)
}

// DeleteExpiredOTPs mocks base method.
func (m *MockStore) DeleteExpiredOTPs(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredOTPs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredOTPs indicates an expected call of DeleteExpiredOTPs.
func (mr *MockStoreMockRecorder) DeleteExpiredOTPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredOTPs", reflect.TypeOf((*MockStore)(nil).DeleteExpiredOTPs), arg0)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteTransactionsByUserID mocks base method.
func (m *MockStore) DeleteTransactionsByUserID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionsByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransactionsByUserID indicates an expected call of DeleteTransactionsByUserID.
func (mr *MockStoreMockRecorder) DeleteTransactionsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionsByUserID", reflect.TypeOf((*MockStore)(nil).DeleteTransactionsByUserID), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(arg0 context.Context, arg1 func(*sqlc.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), arg0, arg1)
}

// GetActiveDeviceTokensForUser mocks base method.
func (m *MockStore) GetActiveDeviceTokensForUser(arg0 context.Context, arg1 uuid.UUID) ([]sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDeviceTokensForUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDeviceTokensForUser indicates an expected call of GetActiveDeviceTokensForUser.
func (mr *MockStoreMockRecorder) GetActiveDeviceTokensForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDeviceTokensForUser", reflect.TypeOf((*MockStore)(nil).GetActiveDeviceTokensForUser), arg0, arg1)
}

// GetDeviceTokensByPlatform mocks base method.
func (m *MockStore) GetDeviceTokensByPlatform(arg0 context.Context, arg1 sqlc.GetDeviceTokensByPlatformParams) ([]sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceTokensByPlatform", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceTokensByPlatform indicates an expected call of GetDeviceTokensByPlatform.
func (mr *MockStoreMockRecorder) GetDeviceTokensByPlatform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceTokensByPlatform", reflect.TypeOf((*MockStore)(nil).GetDeviceTokensByPlatform), arg0, arg1)
}

// GetOTPVerificationByID mocks base method.
func (m *MockStore) GetOTPVerificationByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTPVerificationByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTPVerificationByID indicates an expected call of GetOTPVerificationByID.
func (mr *MockStoreMockRecorder) GetOTPVerificationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTPVerificationByID", reflect.TypeOf((*MockStore)(nil).GetOTPVerificationByID), arg0, arg1)
}

// GetOTPVerificationByUserAndPurpose mocks base method.
func (m *MockStore) GetOTPVerificationByUserAndPurpose(arg0 context.Context, arg1 sqlc.GetOTPVerificationByUserAndPurposeParams) (sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOTPVerificationByUserAndPurpose", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOTPVerificationByUserAndPurpose indicates an expected call of GetOTPVerificationByUserAndPurpose.
func (mr *MockStoreMockRecorder) GetOTPVerificationByUserAndPurpose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOTPVerificationByUserAndPurpose", reflect.TypeOf((*MockStore)(nil).GetOTPVerificationByUserAndPurpose), arg0, arg1)
}

// GetTransactionByID mocks base method.
func (m *MockStore) GetTransactionByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockStoreMockRecorder) GetTransactionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockStore)(nil).GetTransactionByID), arg0, arg1)
}

// GetTransactionByTxHash mocks base method.
func (m *MockStore) GetTransactionByTxHash(arg0 context.Context, arg1 string) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByTxHash", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByTxHash indicates an expected call of GetTransactionByTxHash.
func (mr *MockStoreMockRecorder) GetTransactionByTxHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByTxHash", reflect.TypeOf((*MockStore)(nil).GetTransactionByTxHash), arg0, arg1)
}

// GetTransactionsByStatus mocks base method.
func (m *MockStore) GetTransactionsByStatus(arg0 context.Context, arg1 sqlc.GetTransactionsByStatusParams) ([]sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByStatus", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByStatus indicates an expected call of GetTransactionsByStatus.
func (mr *MockStoreMockRecorder) GetTransactionsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByStatus", reflect.TypeOf((*MockStore)(nil).GetTransactionsByStatus), arg0, arg1)
}

// GetTransactionsByUserID mocks base method.
func (m *MockStore) GetTransactionsByUserID(arg0 context.Context, arg1 uuid.UUID) ([]sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserID indicates an expected call of GetTransactionsByUserID.
func (mr *MockStoreMockRecorder) GetTransactionsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserID", reflect.TypeOf((*MockStore)(nil).GetTransactionsByUserID), arg0, arg1)
}

// GetTransactionsByUserIDAndStatus mocks base method.
func (m *MockStore) GetTransactionsByUserIDAndStatus(arg0 context.Context, arg1 sqlc.GetTransactionsByUserIDAndStatusParams) ([]sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserIDAndStatus", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserIDAndStatus indicates an expected call of GetTransactionsByUserIDAndStatus.
func (mr *MockStoreMockRecorder) GetTransactionsByUserIDAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserIDAndStatus", reflect.TypeOf((*MockStore)(nil).GetTransactionsByUserIDAndStatus), arg0, arg1)
}

// GetUnverifiedOTPsForUser mocks base method.
func (m *MockStore) GetUnverifiedOTPsForUser(arg0 context.Context, arg1 pgtype.UUID) ([]sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnverifiedOTPsForUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnverifiedOTPsForUser indicates an expected call of GetUnverifiedOTPsForUser.
func (mr *MockStoreMockRecorder) GetUnverifiedOTPsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnverifiedOTPsForUser", reflect.TypeOf((*MockStore)(nil).GetUnverifiedOTPsForUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserDeviceTokenByDeviceToken mocks base method.
func (m *MockStore) GetUserDeviceTokenByDeviceToken(arg0 context.Context, arg1 string) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeviceTokenByDeviceToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceTokenByDeviceToken indicates an expected call of GetUserDeviceTokenByDeviceToken.
func (mr *MockStoreMockRecorder) GetUserDeviceTokenByDeviceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceTokenByDeviceToken", reflect.TypeOf((*MockStore)(nil).GetUserDeviceTokenByDeviceToken), arg0, arg1)
}

// GetUserDeviceTokenByID mocks base method.
func (m *MockStore) GetUserDeviceTokenByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDeviceTokenByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDeviceTokenByID indicates an expected call of GetUserDeviceTokenByID.
func (mr *MockStoreMockRecorder) GetUserDeviceTokenByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDeviceTokenByID", reflect.TypeOf((*MockStore)(nil).GetUserDeviceTokenByID), arg0, arg1)
}

// InValidateOTP mocks base method.
func (m *MockStore) InValidateOTP(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InValidateOTP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InValidateOTP indicates an expected call of InValidateOTP.
func (mr *MockStoreMockRecorder) InValidateOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InValidateOTP", reflect.TypeOf((*MockStore)(nil).InValidateOTP), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 sqlc.ListUsersParams) ([]sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListUsersByAccountType mocks base method.
func (m *MockStore) ListUsersByAccountType(arg0 context.Context, arg1 sqlc.ListUsersByAccountTypeParams) ([]sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByAccountType", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByAccountType indicates an expected call of ListUsersByAccountType.
func (mr *MockStoreMockRecorder) ListUsersByAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByAccountType", reflect.TypeOf((*MockStore)(nil).ListUsersByAccountType), arg0, arg1)
}

// RevokeDeviceToken mocks base method.
func (m *MockStore) RevokeDeviceToken(arg0 context.Context, arg1 uuid.UUID) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeDeviceToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeDeviceToken indicates an expected call of RevokeDeviceToken.
func (mr *MockStoreMockRecorder) RevokeDeviceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeDeviceToken", reflect.TypeOf((*MockStore)(nil).RevokeDeviceToken), arg0, arg1)
}

// SearchDeviceTokens mocks base method.
func (m *MockStore) SearchDeviceTokens(arg0 context.Context, arg1 sqlc.SearchDeviceTokensParams) ([]sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDeviceTokens", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDeviceTokens indicates an expected call of SearchDeviceTokens.
func (mr *MockStoreMockRecorder) SearchDeviceTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDeviceTokens", reflect.TypeOf((*MockStore)(nil).SearchDeviceTokens), arg0, arg1)
}

// SearchUsers mocks base method.
func (m *MockStore) SearchUsers(arg0 context.Context, arg1 sqlc.SearchUsersParams) ([]sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockStoreMockRecorder) SearchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockStore)(nil).SearchUsers), arg0, arg1)
}

// UpdateDeviceTokenDetails mocks base method.
func (m *MockStore) UpdateDeviceTokenDetails(arg0 context.Context, arg1 sqlc.UpdateDeviceTokenDetailsParams) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceTokenDetails", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceTokenDetails indicates an expected call of UpdateDeviceTokenDetails.
func (mr *MockStoreMockRecorder) UpdateDeviceTokenDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceTokenDetails", reflect.TypeOf((*MockStore)(nil).UpdateDeviceTokenDetails), arg0, arg1)
}

// UpdateDeviceTokenLastUsed mocks base method.
func (m *MockStore) UpdateDeviceTokenLastUsed(arg0 context.Context, arg1 sqlc.UpdateDeviceTokenLastUsedParams) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceTokenLastUsed", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceTokenLastUsed indicates an expected call of UpdateDeviceTokenLastUsed.
func (mr *MockStoreMockRecorder) UpdateDeviceTokenLastUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceTokenLastUsed", reflect.TypeOf((*MockStore)(nil).UpdateDeviceTokenLastUsed), arg0, arg1)
}

// UpdateDeviceTokenPushNotificationToken mocks base method.
func (m *MockStore) UpdateDeviceTokenPushNotificationToken(arg0 context.Context, arg1 sqlc.UpdateDeviceTokenPushNotificationTokenParams) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceTokenPushNotificationToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceTokenPushNotificationToken indicates an expected call of UpdateDeviceTokenPushNotificationToken.
func (mr *MockStoreMockRecorder) UpdateDeviceTokenPushNotificationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceTokenPushNotificationToken", reflect.TypeOf((*MockStore)(nil).UpdateDeviceTokenPushNotificationToken), arg0, arg1)
}

// UpdateOTPAttempts mocks base method.
func (m *MockStore) UpdateOTPAttempts(arg0 context.Context, arg1 uuid.UUID) (sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOTPAttempts", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOTPAttempts indicates an expected call of UpdateOTPAttempts.
func (mr *MockStoreMockRecorder) UpdateOTPAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOTPAttempts", reflect.TypeOf((*MockStore)(nil).UpdateOTPAttempts), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockStore) UpdateTransaction(arg0 context.Context, arg1 sqlc.UpdateTransactionParams) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockStoreMockRecorder) UpdateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockStore)(nil).UpdateTransaction), arg0, arg1)
}

// UpdateTransactionStatus mocks base method.
func (m *MockStore) UpdateTransactionStatus(arg0 context.Context, arg1 sqlc.UpdateTransactionStatusParams) (sqlc.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockStoreMockRecorder) UpdateTransactionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockStore)(nil).UpdateTransactionStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 sqlc.UpdateUserParams) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockStore) UpdateUserEmail(arg0 context.Context, arg1 sqlc.UpdateUserEmailParams) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockStoreMockRecorder) UpdateUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockStore)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(arg0 context.Context, arg1 sqlc.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), arg0, arg1)
}

// UpsertUserDeviceToken mocks base method.
func (m *MockStore) UpsertUserDeviceToken(arg0 context.Context, arg1 sqlc.UpsertUserDeviceTokenParams) (sqlc.UserDeviceTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserDeviceToken", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserDeviceTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserDeviceToken indicates an expected call of UpsertUserDeviceToken.
func (mr *MockStoreMockRecorder) UpsertUserDeviceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserDeviceToken", reflect.TypeOf((*MockStore)(nil).UpsertUserDeviceToken), arg0, arg1)
}

// VerifyOTP mocks base method.
func (m *MockStore) VerifyOTP(arg0 context.Context, arg1 sqlc.VerifyOTPParams) (sqlc.OtpVerifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0, arg1)
	ret0, _ := ret[0].(sqlc.OtpVerifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockStoreMockRecorder) VerifyOTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockStore)(nil).VerifyOTP), arg0, arg1)
}
